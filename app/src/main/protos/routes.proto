syntax = "proto3";

import "google/api/annotations.proto";
import "common.proto";

package path_api.v1;

service Routes {
    // Lists all routes within the PATH system.
    rpc ListRoutes(ListRoutesRequest) returns (ListRoutesResponse) {
        option (google.api.http) = {
            get: "/v1/routes"
        };
    }

    // Gets information about a single route.
    rpc GetRoute(GetRouteRequest) returns (RouteData) {
        option (google.api.http) = {
            get: "/v1/routes/{route}"
        };
    }

    // Gets the posted train schedule for a route.
    rpc GetRouteSchedule(GetRouteScheduleRequest) returns (GetRouteScheduleResponse) {
        option (google.api.http) = {
            get: "/v1/routes/{route}/schedule"
        };
    }
}

message ListRoutesRequest {
    // Optional. The maximum number of elements to return for a single request.
    // If unspecified, the server will pick a reasonable default.
    int32 page_size = 1;

    // Optional. The page token returned by the server in a previous call. Used
    // to get the next page.
    string page_token = 2;
}

message ListRoutesResponse {
    // The page of routes.
    repeated RouteData routes = 1;

    // The page token used to request the next page. Empty/unspecified if there
    // are no more results.
    string next_page_token = 2;
}

message GetRouteRequest {
    // The route to get information about.
    Route route = 1;
}

message GetRouteScheduleRequest {
    Route route = 1;

    // Optional. The maximum number of elements to return for a single request.
    // If unspecified, the server will pick a reasonable default.
    int32 page_size = 2;

    // Optional. The page token returned by the server in a previous call. Used
    // to get the next page.
    string page_token = 3;
}

message GetRouteScheduleResponse {
    string next_page_token = 1;
}

// Data representing a single route in the PATH system.
message RouteData {
    // The route this entry represents.
    Route route = 1;

    // The ID in the GTFS database of this route.
    string id = 2;

    // The name (long name) of the route.
    string name = 3;

    // The color (headsign color) of this route.
    string color = 4;

    // Represents a single line within this route (think direction of travel).
    message RouteLine {
        // The friendly name of this route line.
        string display_name = 1;

        // The headsign displayed when a train is traveling along this line.
        string headsign = 2;

        // The direction of travel.
        Direction direction = 3;
    }

    // The collection of lines along this route.
    repeated RouteLine lines = 5;
}

